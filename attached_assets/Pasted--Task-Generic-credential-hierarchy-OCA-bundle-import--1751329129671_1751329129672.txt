**Task – Generic credential hierarchy + OCA bundle import**

----------------------------------------------------------------
## 1 · Mongo schema refactor

`apps/api/src/models/CredentialTemplate.ts`

```ts
import { Schema, model, Types } from 'mongoose';

const OverlaySchema = new Schema({
  type: { type: String, required: true },          // e.g. aries/overlays/branding/1.0
  data: { type: Schema.Types.Mixed, required: true }
},{ _id:false });

const CredTemplate = new Schema({
  label: String,
  version: String,
  schemaId: String,
  credDefId: String,
  issuerDid: String,
  overlays: [OverlaySchema],                       // 🌟 generic overlays
  visible: { type: Boolean, default: true },
  updatedAt: { type: Date, default: Date.now }
});

export default model('CredentialTemplate', CredTemplate);
Remove old branding, metaOverlay fields.

2 · Universal OCA import helper
packages/external/oca/importBundle.ts

ts
Copy
Edit
import fetch from 'node-fetch';
import CredentialTemplate from '@api/models/CredentialTemplate';
import { cacheAsset } from '@api/boot/ocaAssets';

export async function importOCABundle(url: string) {
  const [bundle] = await fetch(url).then(r => r.json());

  const branding = bundle.overlays.find(o => o.type.includes('branding'));
  const meta     = bundle.overlays.find(o => o.type.includes('meta'));

  // cache artwork locally if present
  if (branding?.logo) {
    branding.logo = await cacheAsset(
      url.replace(/OCABundle.json$/, 'overlays/branding/' + branding.logo),
      branding.logo
    );
  }

  const doc = await CredentialTemplate.findOneAndUpdate(
    { schemaId: bundle.schema_id },
    {
      label: meta?.name || bundle.name,
      version: bundle.version,
      schemaId: bundle.schema_id,
      credDefId: bundle.cred_def_id,
      issuerDid: meta?.issuer_did,
      overlays: bundle.overlays,
      updatedAt: new Date()
    },
    { upsert: true, new: true }
  );
  return doc;
}
3 · Replace LSBC-only seeder with generic seeder list
apps/api/boot/seedCredentialBundles.ts

ts
Copy
Edit
import { importOCABundle } from '@external/oca/importBundle';

const bundles = [
  'https://raw.githubusercontent.com/bcgov/aries-oca-bundles/main/OCABundles/schema/bcgov-digital-trust/LSBC/Lawyer/Test/OCABundle.json',
  'https://raw.githubusercontent.com/bcgov/aries-oca-bundles/main/OCABundles/schema/bcgov-digital-trust/Person/Prod/OCABundle.json',
  'https://raw.githubusercontent.com/bcgov/aries-oca-bundles/main/OCABundles/schema/bcgov-digital-trust/DigitalBusinessCard/Prod/OCABundle.json'
];

export default async function seed() {
  for (const url of bundles) {
    await importOCABundle(url);
  }
  console.log('✅ Generic credential templates seeded');
}
Call this in server/boot/index.ts right after ensureLawyerCred (you may remove that old function).

4 · Admin UI changes
In the Credential Templates admin page, show columns:

Label, Version, Overlay types joined by “, ”.

“New” button now asks only for OCA Bundle URL.
On save, call POST /api/admin/credentials/import with { url }.

Route:

ts
Copy
Edit
r.post('/import', async (req,res) => {
  const doc = await importOCABundle(req.body.url);
  res.status(201).json(doc);
});
5 · Library endpoint adapts banner logic
GET /api/cred-lib

ts
Copy
Edit
const list = await CredentialTemplate.find({ visible:true }).lean();

const withBranding = list.map(tpl => {
  const branding = tpl.overlays.find(o => o.type.includes('branding'))?.data ?? {};
  const meta     = tpl.overlays.find(o => o.type.includes('meta'))?.data ?? {};
  return { ...tpl, branding, meta };
});

res.json(withBranding.sort((a,b)=> a.label.localeCompare(b.label)));
BannerBottomCard stays the same (reads cred.branding.layout, etc.).

6 · Clean up old single-case code
Delete ensureLawyerCred.ts (no longer needed).

Remove branding / metaOverlay TypeScript props from front-end models.

7 · Compile guard
bash
Copy
Edit
pnpm --filter api dev        # 0 TS errors
pnpm --filter web dev
Credential Library shows Lawyer, Person, Business Card all with branding.

Admin “Credential Templates” lets you paste any OCA bundle URL and it appears.

Ghostwriter instructions
• Create new model, import helper, boot seeder, admin import route.
• Remove old lawyer-specific paths.
• Ensure front-end cards still render (BannerBottomCard uses overlays array).
• Commit: “refactor: generic credential hierarchy + OCA import”.

yaml
Copy
Edit

---

After running, every credential template (present or future) is stored the same way, and your UI branding logic works for all of them—not just LSBC Lawyer.