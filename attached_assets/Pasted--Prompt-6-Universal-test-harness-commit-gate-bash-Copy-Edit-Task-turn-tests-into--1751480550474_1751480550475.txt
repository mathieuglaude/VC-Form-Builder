ðŸ§ª Prompt #6 â€“ Universal test harness + commit gate
bash
Copy
Edit
### ðŸ§ª  Task: turn `tests/` into a first-class citizen & enforce test coverage on every push

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
1  â–¸  Generic test folder + 2 starter suites
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  â€¢ mkdir  tests/unit   tests/e2e
  â€¢ Add **tests/unit/mappingExtractor.test.ts**

        import {describe,it,expect} from 'vitest';
        import {extractMappings} from '@/shared/mapping';

        describe('extractMappings', () => {
          it('pulls birthdate_dateint from sample form', () => {
            const form = await
              import('@/tests/fixtures/form_birthdate.json');
            const m = extractMappings(form.default.formSchema);
            expect(m[0]?.attributeName).toBe('birthdate_dateint');
          });
        });

  â€¢ Add **tests/e2e/proofFlow.e2e.ts**  (supertest)

        import request from 'supertest';
        import {app} from '@/api/server';
        import {describe,it,expect} from 'vitest';

        describe('init-form proof flow', () => {
          it('returns svg + url', async () => {
            const res = await request(app)
              .post('/api/proofs/init-form/7')
              .send();
            expect(res.status).toBe(200);
            expect(res.body.svg).toContain('<svg');
            expect(res.body.invitationUrl).toMatch(/^https?:\/\//);
          });
        });

  â€¢ Place any sample JSON under **tests/fixtures/**.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
2  â–¸  Vitest config
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  â€¢ Add **vitest.config.ts**

        import {defineConfig} from 'vitest/config';
        export default defineConfig({
          test: {
            globals: true,
            environment: 'node',
            include: ['tests/**/*.test.ts', 'tests/**/*.e2e.ts'],
          },
        });

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
3  â–¸  Commit / push guard
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  â€¢ Add to **package.json**

        "scripts": {
          "test": "vitest run",
          "prepush": "pnpm lint && pnpm test"
        }

  â€¢ Update Husky hook:

        pnpm husky add .husky/pre-push "pnpm prepush"

  > Result â†’ **Every push** runs the linter + full test suite; push fails if anything breaks or new code lacks tests.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
4  â–¸  CI placeholder (optional but recommended)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  â€¢ Create **.github/workflows/ci.yml**

        name: CI
        on: [push, pull_request]
        jobs:
          build:
            runs-on: ubuntu-latest
            steps:
              - uses: actions/checkout@v3
              - uses: pnpm/action-setup@v2
                with: {version: 8}
              - run: pnpm install
              - run: pnpm lint
              - run: pnpm test

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
âœ…  Success criteria
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  1. `pnpm test` prints green locally.
  2. Trying `git push` with a failing test is blocked.
  3. New PRs run the GitHub-Actions CI and pass.
Usage Guidance for Your Team
Rule of thumb â€“ any new feature or bug-fix adds/updates a test under tests/.

Keep fixtures small: one JSON per scenario in tests/fixtures.

If a change touches both API and React, supply:

one unit test (logic)

one e2e/API test (route)

Push is rejected until tests & linter are green.

This prompt turns your test suite into a guard-rail, keeps regressions out, and makes Replit auto-runs faster because Vitest is blazingly quick.







Ask ChatGPT
