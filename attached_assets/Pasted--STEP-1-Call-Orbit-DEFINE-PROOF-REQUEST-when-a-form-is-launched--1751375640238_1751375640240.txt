üü¶  STEP 1 ‚Äî Call Orbit ‚ÄúDEFINE PROOF REQUEST‚Äù when a form is launched
================================================================================================

Context
-------
‚Ä¢ We already have:
  - LOB ID ................ a03f92ac-5ce7-4037-b8b5-79ff821b0878
  - API Key ............... MY69uVmVdz3Ml6Egr8clG7x-AYrBy0Et
  - Transaction ID ........ a03f92ac-5ce7-4037-b8b5-79ff821b0878
  - Socket setup is next; for now we only need REST.

‚Ä¢ Orbit Verifier base (dev)  https://devapi-verifier.nborbit.ca
  (QA is the same host with /qa instead of /dev ‚Äì keep base URL configurable).

Goal of this step
-----------------
When a user clicks **‚ÄúVerify Credentials‚Äù** on the live form page:

1. Collect all credential-attribute requirements for that form:
   ```ts
   type FieldRequirement = {
     templateId: string;           // e.g. BC Person Credential
     attribute: string;            // e.g. birthdate
     required: boolean;            // field.required && vc-mode != optional
   }
Build an Orbit ‚ÄúDefine Proof Request‚Äù payload dynamically:

json
Copy
Edit
{
  "proofName": "vcfb::<formId>::<timestamp>",
  "proofVersion": "1.0",
  "comment": "Proof request auto-generated by VC Form Builder",
  "requestedAttributes": [
    {
      "name": "birthdate",
      "restrictions": [{
        "cred_def_id": "<credDefId from template>",
        "issuer_did": "<issuerDid>"
      }],
      "non_revoked": { "from":0, "to":0 }
    }
  ],
  "requestedPredicates": []
}
POST to
POST /verifier/v1/proof-requests
Headers:

makefile
Copy
Edit
lobId:        <env.ORBIT_LOB_ID>
apiKey:       <env.ORBIT_API_KEY>
Content-Type: application/json
Persist only proofRequestId that comes back; we‚Äôll use it in Step 2.

Implementation instructions
üî∏ packages/external/orbit/VerifierClient.ts

ts
Copy
Edit
import ky from 'ky';

export class VerifierClient {
  constructor(private base = process.env.ORBIT_VERIFIER_BASE_URL!,
              private lob = process.env.ORBIT_LOB_ID!,
              private key = process.env.ORBIT_API_KEY!) {}

  private api = ky.create({
    prefixUrl: this.base,
    headers: { lobId: this.lob, apiKey: this.key },
    timeout: 10_000
  });

  async defineProof(def: unknown) {
    return this.api.post('verifier/v1/proof-requests', { json: def }).json<{ proofRequestId:string }>();
  }
}
export const verifier = new VerifierClient();
üî∏ apps/api/src/routes/proofs.ts

ts
Copy
Edit
router.post('/init', async (req, res) => {
  /* body: { formId } */
  const reqs = await buildRequirements(req.body.formId);      // helper you write
  const payload = makeOrbitDefinition(reqs);                  // build JSON shown above
  const { proofRequestId } = await verifier.defineProof(payload);
  res.json({ proofRequestId });                               // front-end stores this
});
üî∏ apps/api/src/routes/index.ts

ts
Copy
Edit
import proofs from './proofs';
app.use('/api/proofs', proofs);
üî∏ env

ini
Copy
Edit
ORBIT_VERIFIER_BASE_URL=https://devapi-verifier.nborbit.ca
ORBIT_LOB_ID=a03f92ac-5ce7-4037-b8b5-79ff821b0878
ORBIT_API_KEY=MY69uVmVdz3Ml6Egr8clG7x-AYrBy0Et
üî∏ apps/web
In PreviewPage.tsx (or wherever the ‚ÄúVerify Credentials‚Äù button lives)

ts
Copy
Edit
const { mutateAsync: initProof } = useMutation(async () => {
  const { proofRequestId } = await api.post('/api/proofs/init', { formId });
  setProofId(proofRequestId);      // keep in state for next step
});
Testing
pnpm db:seed if you added helper to fetch credDefId.

pnpm dev

Open a form that requires a credential, click Verify Credentials.

In server logs you should see:
POST /verifier/v1/proof-requests 200 and JSON with proofRequestId.

Network tab from browser: POST /api/proofs/init ‚Üí 200 { proofRequestId:"‚Ä¶" }.

Deliverables
New VerifierClient class & dependency wired.

/api/proofs/init route returns Orbit proofRequestId.

No breaking changes; TypeScript passes.

After this is green we‚Äôll move to Step 2:
POST /verifier/v1/proof-requests/{id}/prepare-url to get the QR link and
render it in the right-hand pane.